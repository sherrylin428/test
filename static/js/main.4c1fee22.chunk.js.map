{"version":3,"sources":["Redux/store/index.js","Redux/reducers/index.js","Components/TopHeader/index.js","autoComponent.js","Components/WeatherList/WeatherList.js","Item/searchInput.js","index.js"],"names":["store","createStore","state","Arr","Msg","action","type","data","forEach","item","index","id","splice","unshift","Header","props","className","SearchList","inputValue","value","toLowerCase","listView","length","cityList","filter","element","name","slice","map","listItem","WeatherListShow","ShowText","show","weather","description","main","temp","toFixed","src","icon","Searchinput","listID","placeHolder","appID","eventInput","bind","eventKeyDown","clear","event","this","setState","target","keyCode","url","axios","get","res","status","localStorage","getItem","newCityArray","setItem","JSON","stringify","parse","push","dispatch","getState","redata","i","console","log","list","placeholder","onInput","onKeyDown","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c1fee22.chunk.js","sourcesContent":["import { createStore } from \"redux\";\nimport reducer from \"../reducers/index\";\n\nexport const store = createStore(reducer);","import React from \"react\";\n\nexport default function reducer(state = { Arr: [], Msg: \"\" }, action) {//action傳遞的資料，去判斷type&data的內容\n  //Arr:[]是一個裝著所有物件的陣列，Msg:\"\"代表aciton傳遞過來的type的錯誤訊息再去判斷\n  switch (action.type) {\n    case \"DO_NOT_HAVE_CITY\":\n      state.Msg = <font>您輸入的地點 '{action.data}' 不存在</font>;\n      break;\n    case \"HAVE_CITY\":\n      state.Msg = \"\"; //會把訊息清空\n      //如果輸入重複的話會刪掉原本舊的資訊\n      state.Arr.forEach((item, index) => {\n        if (item.id === action.data.id) {\n          state.Arr.splice(index, 1);\n        }\n      });\n      state.Arr.unshift(action.data);//刪除陣列的舊城市\n      break;\n      case \"LISTITEM_DELETE\":\n        state.Arr = [];\n      break;\n    default:\n      break;\n  }\n  return state;\n}","import React from 'react'\nimport './Header.css'\n\nexport default function Header(props){\n\treturn (\n\t\t<div className='header'>\n\t\t\t<h1>Weather Search</h1>\n\t\t</div>\n\t)\n}\n","import React from \"react\";\nimport cityList from \"./cities\";\n\nexport default function SearchList(props) {\n  let inputValue = props.value.toLowerCase();\n  let listItems =\n    inputValue.length === 0\n      ? []\n      : cityList\n          .filter(\n            (element) =>\n              element.name.toLowerCase().slice(0, inputValue.length) ===\n              inputValue\n          )\n          .slice(0, 30);\n  let listView = listItems.map((listItem, index) => (\n    <option key={index}>{listItem.name}</option>\n  ));\n  return <datalist id={props.id}>{listView}</datalist>;\n}\n","import React from \"react\";\nimport \"./Weather.css\";\n\nexport default function WeatherListShow(props) {\n  let ShowText = props.show.Arr.map((item) => (\n    <div className=\"Container\" id={item.id}>\n      <div className=\"WeatherCard\">\n        <div className=\"Location\">city：{item.name}</div>\n        <div className=\"Description\">status：{item.weather[0].description}</div>\n        <div className=\"CurrentWeather\">\n          <div className=\"Temperature\">\n            temp：{(item.main.temp - 273.15).toFixed(1) + \"\\xB0C\"}\n          </div>\n          <img\n            src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n          />\n        </div>\n      </div>\n      \n    </div>\n  ));\n  if (props.show.Msg !== \"\") {\n    ShowText.splice(0, 0, props.show.Msg);\n  }\n  return ShowText;\n}","import React from \"react\";\nimport axios from \"axios\";\nimport { store } from \"../Redux/store\";\nimport Header from \"../Components/TopHeader\"; //輸入匡的上方標題\nimport SearchList from \"../autoComponent\"; //輸入時會有提示字元\nimport WeatherListShow from \"../Components/WeatherList/WeatherList\"; //顯示天氣資訊在畫面上\nimport \"./item.css\";\n\nclass Searchinput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listID: \"locationList\",\n      placeHolder: \"請輸入地點(Location)\", //輸入匡上的為輸入時的提醒文字\n      appID: \"bd45fc9db8849cb46d00a451483ccd44\", //抓天氣API\n      inputValue: \"\", //數入的內容\n    };\n    this.eventInput = this.eventInput.bind(this); //輸入內容的事件\n    this.eventKeyDown = this.eventKeyDown.bind(this); //輸入完成按下enter的事件\n    this.clear = this.clear.bind(this);\n  }\n  eventInput(event) {\n    this.setState({ inputValue: event.target.value }); //用inputValue來取代輸入匡的內容\n  }\n  async eventKeyDown(event) {\n    if (event.keyCode === 13) {\n      //如果按下Enter\n      //就會開始去抓輸入的城市的Api\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.inputValue}&appid=${this.state.appID}`;\n      try {\n        const res = await axios.get(url); //用res來代替取到城市的API\n        if (res.status === 200) {\n          //http回應200代表，api回應成功\n          if (localStorage.getItem(\"city\") === null) {\n            //如果貨櫃裡面找不到叫city的籃子\n            let newCityArray = []; //就建立新的籃子自己取名為newCityArray\n            localStorage.setItem(\"city\", JSON.stringify(newCityArray)); //把newCityArray放進貨櫃裡面，告訴貨櫃這叫\"city\"\n          }\n          let newCityArray = JSON.parse(localStorage.getItem(\"city\")); //我叫貨櫃把之前放進去的city的籃子拿出來\n          newCityArray.push(res.data); //把蘋果轉乘字串放進newCityArray裡面\n          localStorage.setItem(\"city\", JSON.stringify(newCityArray));\n          store.dispatch({\n            //利用store.dispatc用Action傳遞到reducer裡\n            type: \"HAVE_CITY\", //代表有搜尋到城市\n            data: JSON.parse(JSON.stringify(res.data)), //這個data就會代表\"city\"所存取的內容\n          });\n          localStorage.setItem(\"city\", JSON.stringify(store.getState().Arr));\n        }\n      } catch (error) {\n        //如果抓不到呈現error\n        store.dispatch({\n          type: \"DO_NOT_HAVE_CITY\", //代表沒有找到該輸入的城市\n          data: this.state.inputValue, //這個data只會把輸入的列印出來\n        });\n      }\n      this.setState({ inputValue: \"\" }); //代表把輸入匡清空\n    }\n  }\n\n  clear() {\n    store.dispatch({\n      type: \"LISTITEM_DELETE\",\n    });\n    localStorage.clear();\n    this.setState({ inputValue: \"\" });\n  }\n  componentDidMount() {\n    //重新載入的時候\n    const redata = JSON.parse(localStorage.getItem(\"city\")); //用redata來取代輸入程式的data\n    if (redata === null) return;\n    for (let i = redata.length - 1; i >= 0; i--) {\n      console.log(redata[i], typeof redata[i]);\n      this.setState({\n        ShowText: store.dispatch({ type: \"HAVE_CITY\", data: redata[i] }), //重新載入的時候，直接顯示該城市資哩奧\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"item\">\n        <Header />\n        <div className=\"search-input\">\n          <input\n            list={this.state.listID}\n            placeholder={this.state.placeHolder}\n            onInput={this.eventInput}\n            onKeyDown={this.eventKeyDown}\n            value={this.state.inputValue}\n          />\n        </div>\n        {(JSON.parse(localStorage.getItem(\"city\")) != null) && (\n          <div className=\"search-input\">\n            <button onClick={this.clear}>X</button>\n          </div>\n        )}\n        <SearchList id={this.state.listID} value={this.state.inputValue} />\n        <WeatherListShow show={store.getState()} />\n      </div>\n    );\n  }\n}\nexport default Searchinput;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Style/home.css\";\nimport Searchinput from \"./Item/searchInput\";\n\nReactDOM.render(<Searchinput />, document.getElementById(\"root\"));//進入搜尋框架\n"],"sourceRoot":""}